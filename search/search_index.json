{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>A rich text editor library for both Jetpack Compose and Compose Multiplatform, fully customizable and supports the common rich text editor features</p> <ul> <li>Multiplatform: Compose Rich Editor supports Compose Multiplatform (Android, iOS, Desktop, Web).</li> <li>Easy to use: Compose Rich Editor's API leverages Kotlin's language features for simplicity and minimal boilerplate.</li> <li>WYSIWYG: Compose Rich Editor is a WYSIWYG editor that supports the most common text styling features.</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#slack-demo","title":"Slack Demo","text":""},{"location":"#html-to-rich-text","title":"Html to Rich Text","text":""},{"location":"#markdown-to-rich-text","title":"Markdown to Rich Text","text":""},{"location":"#download","title":"Download","text":"<p>Compose Rich Editor is available on <code>mavenCentral()</code>.</p> <pre><code>implementation(\"com.mohamedrejeb.richeditor:richeditor-compose:1.0.0-rc10\")\n</code></pre>"},{"location":"#compatibility","title":"Compatibility","text":"Kotlin version Compose version Compose Rich Editor version 2.0.21 1.7.0 1.0.0-rc10 2.0.20 1.6.11 1.0.0-rc09 2.0.10 1.6.11 1.0.0-rc06 2.0.0 1.6.10 1.0.0-rc05-k2 1.9.24 1.6.10 1.0.0-rc05"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#richtextstate","title":"RichTextState","text":"<p>Use <code>RichTextEditor</code> composable to create a rich text editor.</p> <p>The <code>RichTextEditor</code> composable requires a <code>RichTextState</code> to manage the editor's state.</p> <p>To create a <code>RichTextState</code>, use the <code>rememberRichTextState</code> function:</p> <pre><code>val state = rememberRichTextState()\n\nRichTextEditor(\n    state = state,\n)\n</code></pre>"},{"location":"#styling-spans","title":"Styling Spans","text":"<p>To style spans, <code>RichTextState</code> provides <code>toggleSpanStyle</code> method:</p> <pre><code>// Toggle a span style.\nrichTextState.toggleSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n</code></pre> <p>To get the current span style of the selection, use <code>RichTextState.currentSpanStyle</code>:</p> <pre><code>// Get the current span style.\nval currentSpanStyle = richTextState.currentSpanStyle\nval isBold = currentSpanStyle.fontWeight = FontWeight.Bold\n</code></pre>"},{"location":"#styling-paragraphs","title":"Styling Paragraphs","text":"<p>To style paragraphs, <code>RichTextState</code> provides <code>toggleParagraphStyle</code> method:</p> <pre><code>// Toggle a paragraph style.\nrichTextState.toggleParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n</code></pre> <p>To get the current paragraph style of the selection, use <code>RichTextState.currentParagraphStyle</code>:</p> <pre><code>// Get the current paragraph style.\nval currentParagraphStyle = richTextState.currentParagraphStyle\nval isCentered = currentParagraphStyle.textAlign = TextAlign.Center\n</code></pre>"},{"location":"#add-links","title":"Add links","text":"<p>To add links, <code>RichTextState</code> provides <code>addLink</code> method:</p> <pre><code>// Add link after selection.\nrichTextState.addLink(\n    text = \"Compose Rich Editor\",\n    url = \"https://github.com/MohamedRejeb/Compose-Rich-Editor\"\n)\n</code></pre> <p>To get if the current selection is a link, use <code>RichTextState.isLink</code>:</p> <pre><code>// Get if the current selection is a link.\nval isLink = richTextState.isLink\n</code></pre> <p>By default, links will be opened by your platform's <code>UriHandler</code>, if however you want to handle the links on your own, you can override the composition local as such:</p> <pre><code>val myUriHandler by remember {\n    mutableStateOf(object : UriHandler {\n        override fun openUri(uri: String) {\n            // Handle the clicked link however you want\n        }\n    })\n}\nCompositionLocalProvider(LocalUriHandler provides myUriHandler) {\n    RichText( ... )\n}\n</code></pre>"},{"location":"#add-code-blocks","title":"Add Code Blocks","text":"<p>To add code blocks, <code>RichTextState</code> provides <code>toggleCodeSpan</code> method:</p> <pre><code>// Toggle code span.\nrichTextState.toggleCodeSpan()\n</code></pre> <p>To get if the current selection is a code block, use <code>RichTextState.isCodeSpan</code>:</p> <pre><code>// Get if the current selection is a code span.\nval isCodeSpan = richTextState.isCodeSpan\n</code></pre>"},{"location":"#ordered-and-unordered-lists","title":"Ordered and Unordered Lists","text":"<p>You can add ordered and unordered lists using <code>RichTextState</code>:</p> <pre><code>// Toggle ordered list.\nrichTextState.toggleOrderedList()\n\n// Toggle unordered list.\nrichTextState.toggleUnorderedList()\n</code></pre> <p>You can get if the current selection is an ordered or unordered list, using <code>RichTextState</code>:</p> <pre><code>// Get if the current selection is an ordered list.\nval isOrderedList = richTextState.isOrderedList\n\n// Get if the current selection is an unordered list.\nval isUnorderedList = richTextState.isUnorderedList\n</code></pre>"},{"location":"#customizing-the-rich-text-configuration","title":"Customizing the rich text configuration","text":"<p>Some of the rich text editor's features can be customized, such as the color of the links and the code blocks.</p> <pre><code>richTextState.config.linkColor = Color.Blue\nrichTextState.config.linkTextDecoration = TextDecoration.Underline\nrichTextState.config.codeSpanColor = Color.Yellow\nrichTextState.config.codeSpanBackgroundColor = Color.Transparent\nrichTextState.config.codeSpanStrokeColor = Color.LightGray\n</code></pre>"},{"location":"#html-import-and-export","title":"HTML import and export","text":"<p>To convert HTML to <code>RichTextState</code>, use <code>RichTextState.setHtml</code> method:</p> <pre><code>val html = \"&lt;p&gt;&lt;b&gt;Compose Rich Editor&lt;/b&gt;&lt;/p&gt;\"\nrichTextState.setHtml(html)\n</code></pre> <p>To convert <code>RichTextState</code> to HTML, use <code>RichTextState.toHtml</code> method:</p> <pre><code>val html = richTextState.toHtml()\n</code></pre>"},{"location":"#markdown-import-and-export","title":"Markdown import and export","text":"<p>To convert Markdown to <code>RichTextState</code>, use <code>RichTextState.setMarkdown</code> method:</p> <pre><code>val markdown = \"**Compose** *Rich* Editor\"\nrichTextState.setMarkdown(markdown)\n</code></pre> <p>To convert <code>RichTextState</code> to Markdown, use <code>RichTextState.toMarkdown</code> method:</p> <pre><code>val markdown = richTextState.toMarkdown()\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 Mohamed Rejeb\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"code_blocks/","title":"Code Spans","text":"<p>To add code spans, <code>RichTextState</code> provides <code>toggleCodeSpan</code> method:</p> <pre><code>// Toggle code span.\nrichTextState.toggleCodeSpan()\n</code></pre> <p>To get if the current selection is a code span, use <code>RichTextState.isCodeSpan</code>:</p> <pre><code>// Get if the current selection is a code span.\nval isCodeSpan = richTextState.isCodeSpan\n</code></pre>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin at colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"faq/","title":"FAQ","text":"<p>Have a question that isn't part of the FAQ? Open an issue here Compose-Rich-Editor.</p>"},{"location":"faq/#how-do-i-get-development-snapshots","title":"How do I get development snapshots?","text":"<p>Add the snapshots repository to your list of repositories in <code>build.gradle.kts</code>:</p> <pre><code>allprojects {\n    repositories {\n        maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n</code></pre> <p>Or to your dependency resolution management in <code>settings.gradle.kts</code>:</p> <pre><code>dependencyResolutionManagement {\n    repositories {\n        maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n</code></pre> <p>Use the snapshot version:</p> <pre><code>implementation(\"com.mohamedrejeb.richeditor:richeditor-compose:1.0.0-SNAPSHOT\")\n</code></pre> <p>Note: Snapshots are deployed for each new commit on <code>main</code> that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#artifacts","title":"Artifacts","text":"<p>Compose Rich Editor has only one artifact, for now, published to <code>mavenCentral()</code>:</p> <ul> <li><code>com.mohamedrejeb.richeditor:richeditor-compose</code>: The default artifact which includes all the functionalities of the library.</li> </ul> <p>My goal is to move the core functionalities of the library to a separate artifact and keep the default artifact as a wrapper around the core artifact, so I can support other targets like Android Views and Compose HTML.</p>"},{"location":"getting_started/#richtextstate","title":"RichTextState","text":"<p><code>RichTextState</code> is a class that manages the state of the editor.</p> <p>The <code>RichTextEditor</code> composable requires a <code>RichTextState</code> to manage the editor's state.</p> <p>To create a <code>RichTextState</code>, use the <code>rememberRichTextState</code> function:</p> <pre><code>val state = rememberRichTextState()\n\nRichTextEditor(\n    state = state,\n)\n</code></pre> <p>Check out the full documentation for more info.</p>"},{"location":"getting_started/#styling-spans","title":"Styling Spans","text":"<p>To style spans, <code>RichTextState</code> provides <code>toggleSpanStyle</code> method:</p> <pre><code>// Toggle a span style.\nrichTextState.toggleSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n</code></pre> <p>To get the current span style of the selection, use <code>RichTextState.currentSpanStyle</code>:</p> <pre><code>// Get the current span style.\nval currentSpanStyle = richTextState.currentSpanStyle\nval isBold = currentSpanStyle.fontWeight = FontWeight.Bold\n</code></pre> <p>Check out the full documentation for more info.</p>"},{"location":"getting_started/#styling-paragraphs","title":"Styling Paragraphs","text":"<p>To style paragraphs, <code>RichTextState</code> provides <code>toggleParagraphStyle</code> method:</p> <pre><code>// Toggle a paragraph style.\nrichTextState.toggleParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n</code></pre> <p>To get the current paragraph style of the selection, use <code>RichTextState.currentParagraphStyle</code>:</p> <pre><code>// Get the current paragraph style.\nval currentParagraphStyle = richTextState.currentParagraphStyle\nval isCentered = currentParagraphStyle.textAlign = TextAlign.Center\n</code></pre> <p>Check out the full documentation for more info.</p>"},{"location":"getting_started/#supported-styling-formats","title":"Supported Styling Formats","text":"<p>The styling format supported by Compose Rich Editor:</p> <ul> <li>Bold</li> <li>Italic</li> <li>Underline</li> <li>Strikethrough</li> <li>Text color</li> <li>Background color</li> <li>Font size</li> <li>Any custom style using <code>SpanStyle</code></li> <li>Text Align</li> <li>Any custom style using <code>ParagraphStyle</code></li> <li>Ordered List</li> <li>Unordered List</li> <li>Links</li> <li>Code Blocks</li> </ul> <p>There are some styling formats that are not supported yet, but I'm planning to add them in the future:</p> <ul> <li>Images</li> <li>Blockquotes</li> <li>Multiline Code Blocks</li> <li>Checkbox</li> </ul>"},{"location":"html_import_export/","title":"HTML import and export","text":"<p>To convert HTML to <code>RichTextState</code>, use <code>RichTextState.setHtml</code> method:</p> <pre><code>val html = \"&lt;p&gt;&lt;b&gt;Compose Rich Editor&lt;/b&gt;&lt;/p&gt;\"\nrichTextState.setHtml(html)\n</code></pre> <p>To convert <code>RichTextState</code> to HTML, use <code>RichTextState.toHtml</code> method:</p> <pre><code>val html = richTextState.toHtml()\n</code></pre>"},{"location":"links/","title":"Add links","text":"<ul> <li>To add links, <code>RichTextState</code> provides <code>addLink</code> method:</li> </ul> <pre><code>// Add link after selection.\nrichTextState.addLink(\n    text = \"Compose Rich Editor\",\n    url = \"https://github.com/MohamedRejeb/Compose-Rich-Editor\"\n)\n</code></pre> <ul> <li>To add link to the selected text, <code>RichTextState</code> provides <code>addLinkToSelection</code> method:</li> </ul> <pre><code>// Add link to selected text.\nrichTextState.addLinkToSelection(\n    url = \"https://kotlinlang.org/\"\n)\n</code></pre> <ul> <li>To update link URL, <code>RichTextState</code> provides <code>updateLink</code> method:</li> </ul> <pre><code>// Update selected link URL.\nrichTextState.updateLink(\n    url = \"https://kotlinlang.org/\"\n)\n</code></pre> <ul> <li>To remove links, <code>RichTextState</code> provides <code>removeLink</code> method:</li> </ul> <pre><code>// Remove link from selected text.\nrichTextState.removeLink()\n</code></pre> <ul> <li>To get if the current selection is a link, use <code>RichTextState.isLink</code>:</li> </ul> <pre><code>// Get if the current selection is a link.\nval isLink = richTextState.isLink\n</code></pre> <ul> <li>To get the current link text, use <code>RichTextState.selectedLinkText</code>:</li> </ul> <pre><code>// Get the current link text.\nval linkText = richTextState.selectedLinkText\n</code></pre> <ul> <li>To get the current link URL, use <code>RichTextState.selectedLinkUrl</code>:</li> </ul> <pre><code>// Get the current link URL.\nval linkUrl = richTextState.selectedLinkUrl\n</code></pre> <p>By default, links will be opened by your platform's <code>UriHandler</code>, if however you want to handle the links on your own, you can override the composition local as such:</p> <pre><code>val myUriHandler by remember {\n    mutableStateOf(object : UriHandler {\n        override fun openUri(uri: String) {\n            // Handle the clicked link however you want\n        }\n    })\n}\nCompositionLocalProvider(LocalUriHandler provides myUriHandler) {\n    RichText( ... )\n}\n</code></pre>"},{"location":"markdown_import_export/","title":"Markdown import and export","text":"<p>To convert Markdown to <code>RichTextState</code>, use <code>RichTextState.setMarkdown</code> method:</p> <pre><code>val markdown = \"**Compose** *Rich* Editor\"\nrichTextState.setMarkdown(markdown)\n</code></pre> <p>To convert <code>RichTextState</code> to Markdown, use <code>RichTextState.toMarkdown</code> method:</p> <pre><code>val markdown = richTextState.toMarkdown()\n</code></pre>"},{"location":"ordered_unordered_lists/","title":"Ordered and Unordered Lists","text":"<p>You can add ordered and unordered lists using <code>RichTextState</code>:</p> <pre><code>// Toggle ordered list.\nrichTextState.toggleOrderedList()\n\n// Toggle unordered list.\nrichTextState.toggleUnorderedList()\n</code></pre> <p>You can get if the current selection is an ordered or unordered list, using <code>RichTextState</code>:</p> <pre><code>// Get if the current selection is an ordered list.\nval isOrderedList = richTextState.isOrderedList\n\n// Get if the current selection is an unordered list.\nval isUnorderedList = richTextState.isUnorderedList\n</code></pre> <p>You can control the list indentation using <code>RichTextState</code>:</p> <pre><code>// Change list indentation (ordered and unordered).\nrichTextState.config.listIndent = 20\n\n// Change only ordered list indentation.\nrichTextState.config.orderedListIndent = 20\n\n// Change only unordered list indentation.\nrichTextState.config.unorderedListIndent = 20\n</code></pre>"},{"location":"paragraph_style/","title":"Paragraph Style","text":""},{"location":"paragraph_style/#styling-paragraphs","title":"Styling Paragraphs","text":"<p>To style paragraphs, <code>RichTextState</code> provides <code>toggleParagraphStyle</code> method:</p> <pre><code>// Toggle a paragraph style.\nrichTextState.toggleParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n\n// Add a paragraph style.\nrichTextState.addParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n\n// Remove a paragraph style.\nrichTextState.removeParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n</code></pre> <p>To get the current paragraph style of the selection, use <code>RichTextState.currentParagraphStyle</code>:</p> <pre><code>// Get the current paragraph style.\nval currentParagraphStyle = richTextState.currentParagraphStyle\nval isCentered = currentParagraphStyle.textAlign = TextAlign.Center\nval isLeft = currentParagraphStyle.textAlign = TextAlign.Left\nval isRight = currentParagraphStyle.textAlign = TextAlign.Right\n</code></pre>"},{"location":"rich_text_state/","title":"RichTextState","text":"<p>Use <code>RichTextEditor</code> composable to create a rich text editor.</p> <p>The <code>RichTextEditor</code> composable requires a <code>RichTextState</code> to manage the editor's state.</p> <p>To create a <code>RichTextState</code>, use the <code>rememberRichTextState</code> function:</p> <pre><code>val state = rememberRichTextState()\n\nRichTextEditor(\n    state = state,\n)\n</code></pre>"},{"location":"rich_text_state/#customizing-the-rich-text-configuration","title":"Customizing the rich text configuration","text":"<p>Some of the rich text editor's features can be customized, such as the color of the links and the code blocks.</p> <pre><code>// Change link color and text decoration.\nrichTextState.config.linkColor = Color.Blue\nrichTextState.config.linkTextDecoration = TextDecoration.Underline\n\n// Change code block colors.\nrichTextState.config.codeSpanColor = Color.Yellow\nrichTextState.config.codeSpanBackgroundColor = Color.Transparent\nrichTextState.config.codeSpanStrokeColor = Color.LightGray\n\n// Change list indentation (ordered and unordered).\nrichTextState.config.listIndent = 20\n\n// Change only ordered list indentation.\nrichTextState.config.orderedListIndent = 20\n\n// Change only unordered list indentation.\nrichTextState.config.unorderedListIndent = 20\n</code></pre>"},{"location":"rich_text_state/#changing-the-editors-selection","title":"Changing the editor's selection","text":"<p>The editor's selection can be changed using the <code>RichTextState.selection</code> property.</p> <pre><code>richTextState.selection = TextRange(0, 5)\n</code></pre>"},{"location":"rich_text_state/#performing-string-operations-on-rich-text","title":"Performing string operations on rich text","text":"<p>The <code>RichTextState</code> class provides a set of functions to perform string operations on the rich text while preserving the styles.</p> <pre><code>// Insert text at custom posiotn.\nrichTextState.addTextAtIndex(5, \"Hello\")\n\n// Insert text after the current selection.\nrichTextState.addTextAfterSelection(\"Hello\")\n\n// Remove text range.\nrichTextState.removeTextRange(TextRange(0, 5))\n\n// Remove selected text.\nrichTextState.removeSelectedText()\n\n// Replace text range.\nrichTextState.replaceTextRange(TextRange(0, 5), \"Hello\")\n\n// Replace selected text.\nrichTextState.replaceSelectedText(\"Hello\")\n</code></pre>"},{"location":"span_style/","title":"Styling Spans","text":"<p>To style spans, <code>RichTextState</code> provides <code>toggleSpanStyle</code> method:</p> <pre><code>// Toggle a span style.\nrichTextState.toggleSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n\n// Add a span style.\nrichTextState.addSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n\n// Add a span style for a specific range.\nrichTextState.addSpanStyle(SpanStyle(fontWeight = FontWeight.Bold), TextRange(0, 5))\n\n// Remove a span style.\nrichTextState.removeSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n\n// Remove a span style for a specific range.\nrichTextState.removeSpanStyle(SpanStyle(fontWeight = FontWeight.Bold), TextRange(0, 5))\n</code></pre> <p>To get the current span style of the selection, use <code>RichTextState.currentSpanStyle</code>:</p> <pre><code>// Get the current span style.\nval currentSpanStyle = richTextState.currentSpanStyle\nval isBold = currentSpanStyle.fontWeight == FontWeight.Bold\nval isItalic = currentSpanStyle.fontStyle == FontStyle.Italic\nval isUnderline = currentSpanStyle.textDecoration == TextDecoration.Underline\n\n// Get the span style for a specific range.\nval spanStyle = richTextState.getSpanStyle(TextRange(0, 5))\nval isBold = spanStyle.fontWeight == FontWeight.Bold\n</code></pre>"},{"location":"upgrading/","title":"Upgrading from Compose Rich Editor 0.x to 1.x","text":"<p>This is a short guide to highlight the main changes when upgrading from Compose Rich Editor 0.x to 1.x and how to handle them.</p>"},{"location":"upgrading/#calling-richtexteditor-with-richtextstate","title":"Calling <code>RichTextEditor</code> with <code>RichTextState</code>","text":"<p>In 0.x you would use <code>RichTextValue</code> to create the rich text state and pass it to <code>RichTextEditor</code>:</p> <pre><code>var richTextValue by remember { mutableStateOf(RichTextValue()) }\n\nRichTextEditor(\n    value = richTextValue,\n    onValueChange = {\n        richTextValue = it\n    },\n)\n</code></pre> <p>In 1.x <code>RichTextValue</code> is deprecated and you should use <code>RichTextState</code> instead:</p> <pre><code>val richTextState = rememberRichTextState()\n\nRichTextEditor(\n    state = richTextState,\n)\n</code></pre>"}]}